{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQAQG8lCssX0uODg0XXjSb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/santhoshi-h/datasets/blob/main/Loan%20Prediction%20using%20Logistic%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Loan Prediction using Logistic Regression"
      ],
      "metadata": {
        "id": "qS82RLoaM24L"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JYZOLw6bM0K-",
        "outputId": "84912b31-1830-49df-ad1e-b11e38fb01e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial DataFrame Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 614 entries, 0 to 613\n",
            "Data columns (total 13 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Loan_ID            614 non-null    object \n",
            " 1   Gender             601 non-null    object \n",
            " 2   Married            611 non-null    object \n",
            " 3   Dependents         599 non-null    object \n",
            " 4   Education          614 non-null    object \n",
            " 5   Self_Employed      582 non-null    object \n",
            " 6   ApplicantIncome    614 non-null    int64  \n",
            " 7   CoapplicantIncome  614 non-null    float64\n",
            " 8   LoanAmount         592 non-null    float64\n",
            " 9   Loan_Amount_Term   600 non-null    float64\n",
            " 10  Credit_History     564 non-null    float64\n",
            " 11  Property_Area      614 non-null    object \n",
            " 12  Loan_Status        614 non-null    object \n",
            "dtypes: float64(4), int64(1), object(8)\n",
            "memory usage: 62.5+ KB\n",
            "None\n",
            "\n",
            "Initial Missing Values:\n",
            "Loan_ID               0\n",
            "Gender               13\n",
            "Married               3\n",
            "Dependents           15\n",
            "Education             0\n",
            "Self_Employed        32\n",
            "ApplicantIncome       0\n",
            "CoapplicantIncome     0\n",
            "LoanAmount           22\n",
            "Loan_Amount_Term     14\n",
            "Credit_History       50\n",
            "Property_Area         0\n",
            "Loan_Status           0\n",
            "dtype: int64\n",
            "\n",
            "Missing Values After Filling:\n",
            "Gender               0\n",
            "Married              0\n",
            "Dependents           0\n",
            "Education            0\n",
            "Self_Employed        0\n",
            "ApplicantIncome      0\n",
            "CoapplicantIncome    0\n",
            "LoanAmount           0\n",
            "Loan_Amount_Term     0\n",
            "Credit_History       0\n",
            "Property_Area        0\n",
            "Loan_Status          0\n",
            "dtype: int64\n",
            "Logistic Regression accuracy =  0.8709677419354839\n",
            "y_predicted: [1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1\n",
            " 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1]\n",
            "y_test: [1 0 1 0 1 0 1 1 0 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1\n",
            " 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Importing & Loading the dataset\n",
        "url = \"https://raw.githubusercontent.com/santhoshi-h/datasets/main/loan%20prediction.csv\"\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "# Display initial information and missing values\n",
        "print(\"Initial DataFrame Info:\")\n",
        "print(df.info())\n",
        "print(\"\\nInitial Missing Values:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Fill missing values\n",
        "df['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mean())\n",
        "df['Credit_History'] = df['Credit_History'].fillna(df['Credit_History'].median())\n",
        "df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])\n",
        "df['Married'] = df['Married'].fillna(df['Married'].mode()[0])\n",
        "df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])\n",
        "df['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])\n",
        "df['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0])\n",
        "\n",
        "# Encode categorical variables\n",
        "df['Loan_Status'].replace('Y', 1, inplace=True)\n",
        "df['Loan_Status'].replace('N', 0, inplace=True)\n",
        "df.Gender = df.Gender.map({'Male': 1, 'Female': 0})\n",
        "df.Married = df.Married.map({'Yes': 1, 'No': 0})\n",
        "df.Dependents = df.Dependents.map({'0': 0, '1': 1, '2': 2, '3+': 3})\n",
        "df.Education = df.Education.map({'Graduate': 1, 'Not Graduate': 0})\n",
        "df.Self_Employed = df.Self_Employed.map({'Yes': 1, 'No': 0})\n",
        "df.Property_Area = df.Property_Area.map({'Urban': 2, 'Rural': 0, 'Semiurban': 1})\n",
        "\n",
        "# Drop the Loan_ID column\n",
        "df.drop('Loan_ID', axis=1, inplace=True)\n",
        "\n",
        "# Ensure no missing values remain\n",
        "print(\"\\nMissing Values After Filling:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Define features and target\n",
        "X = df.drop('Loan_Status', axis=1)\n",
        "y = df['Loan_Status']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import metrics\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)\n",
        "\n",
        "# Train the model\n",
        "model = LogisticRegression(max_iter=1000)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "lr_prediction = model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "print('Logistic Regression accuracy = ', metrics.accuracy_score(y_test, lr_prediction))\n",
        "print(\"y_predicted:\", lr_prediction)\n",
        "print(\"y_test:\", y_test.values)\n"
      ]
    }
  ]
}